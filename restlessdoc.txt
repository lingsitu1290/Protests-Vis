API DOCUMENTATION: 

Click on third link to link to API from homepage. 
1. Displays all events 
http://localhost:5000/api/events/
2. Displays event with id of 253461643
http://localhost:5000/api/events/253461643 

USES:
====================
In terminal: 
--------------------
1. curl  http://localhost:5000/api/events/253461643
2. curl  http://localhost:5000/api/events

3. Curl use to filter data 
curl \
  -G \
  -H "Content-type: application/json" \
  -d "q={\"filters\":[{\"name\":\"full_location\",\"op\":\"like\",\"val\":\"%Turkey%\"}]}" \
  http://localhost:5000/api/events

In browser: 
--------------------
1. Search where full_location has Turkey in value:
http://localhost:5000/api/events?q={"filters":[{"name":"full_location","op":"like","val":"%Turkey%"}]}

2. Search where url is from yahoo:
http://localhost:5000/api/events?q={"filters":[{"name":"url","op":"like","val":"%yahoo%"}]}


Using Python:
--------------------
This will return data where full_date contains the value 2016.

import requests
import json

url = 'http://localhost:5000/api/events'
headers = {'Content-Type': 'application/json'}

filters = [dict(name='full_date', op='like', val='2016')]
params = dict(q=json.dumps(dict(filters=filters)))

response = requests.get(url, params=params, headers=headers)
assert response.status_code == 200
print(response.json())


Querying in URL:
====================

URL parameter key for searching is q (for query): 

    Example: http://localhost:5000/api/events?q={}

Query object uses a JSON object that filters the query. Filters takes three arguments(name, op, and val). Name is the column that we're searching on. Op is the operator that we're using for our search). Val is the value that we're searching for. 

    Example: http://localhost:5000/api/events?q={"filters":[{"name":"url","op":"like","val":"%yahoo%"}]}


Further Information: 
--------------------
1. Name is column name in the table:
Possible columns are: event_code, event_id, full_date, full_location, latitude, longitude, url

2. Operators recognized:
==, eq, equals, equals_to
!=, neq, does_not_equal, not_equal_to
>, gt, <, lt
>=, ge, gte, geq, <=, le, lte, leq
in, not_in
is_null, is_not_null
like
has
any

3. Val is the value of what is being looked for:
Can have wildcard % used to search for data within value.
For example, %Turkey% looks for any event where full_location contains the string Turkey.

4. Pagination: 
From Flask Restless, "Responses to GET requests are paginated by default, with at most ten objects per page. To request a specific page, add a page=N query parameter to the request URL, where N is a positive integer (the first page is page one). If no page query parameter is specified, the first page will be returned."

    Example 1: http://localhost:5000/api/events?page=5324
        This will go to page 5324 of the GET requests. 